1:dalvik（32位）寄存器命名法： v-局部变量寄存器  p-参数寄存器
2:java-calss-dex-amali
3:dalvik字节码类型：byte - B;char - C;short - S;int - I;long - J;float - F;double - D;booklean - Z;void - V;java类类型 - L;数组类型 - [
4:字段格式 类型 （包名+类名）-> 字段名称:字段类型
5:dalvik指令格式  基础字节码 - 名称后缀/字节码后缀 目的寄存器 源寄存    名称后缀是wide，表示标识指令数据宽度为64；字节码后缀是from16表示标识原源寄存为16位
6:Dalvik指令集中大多数指令用到了寄存器作为目的的操作数或源操作数，其中A/B/C/D/E/F/G/H代表一个4位的数值，AA/BB/..../HH代表一个8位的数值，AAAA/BBBB/..../HHHH代表16位的数值
7:13种dalvik指令的使用：
    (1):空操作指令: nop  它的值位00，通常nop指令被用来作对其代码之用，无实际操作
    (2):数据操作指令:move   Move vA,vB 将vB寄存器的值赋给vA寄存器，源寄存器与目的寄存器都为4位；
        Move/form16 vAA,vBB 将vBBBB寄存器的值赋给vAA寄存器，源寄存器位16位，目的寄存器为8位。
        move-result vAA 接收方法的返回值
        move-exception vAA 接收错误信息
    (3):返回指令(重点) return  return-void:表示从一个void方法返回，返回值为空
        return vAA 表示返回一个32位非对象类型值，返回值寄存器为8为的寄存器
        return-object vAA 表示函数返回一个对象类型的值，返回值为8位的寄存器vAA
    (4):数据定义指令(重点) const  定义程序中用到的常量、字符串、类等类型
        const/4 vA #+B 将数值符号扩展为32位后赋值给寄存器vA
        const-string(/jumbo) vAA stringg@BBBB 通过字符串索引(较大)构造一个字符串并赋值给寄存器vAA
        const-class(/jumbo) vAA,type@BBBB 通过类型索引(较大)获取一个类引并赋值给寄存器vAA
    (5):实例操作指令
        new-instance vAA type@BBBB 构造一个指定类型对象的新实例，并将对象引用赋给vAA寄存器，类型符type指定的类型不能是数组类
        instance-of vA,vB, type@CCC 判断vB寄存器中的对象引用是否可以转化为指定的类型，如果可以vA寄存器赋值为1，否则va寄存器赋值为0
        check-cast vAA type@BBBB 将vAA强转为指定类型，如果失败会报出ClassCastException异常，
    (6):数组操作指令: 包括获取数组长度，新建数组，数组赋值，数组元素取值与赋值操作
        array-length vA,vB 获取给定vB寄存器中数组的长度并将值赋给vA寄存器
        new-array vA,vB type@BBBB 改造指定类型与大小（vB）的数组，并将值赋给vA寄存器
        filled-new-array vAA +BBBBB 用指定的数据来填充数组
    (7):异常指令: throw vAA 抛出vAA寄存器中指定类型的异常
    (8):跳转指令: 跳转指令用于从当前地址跳转到指定的偏移处
        goto 无条件跳转
        switch 分支跳转
            packed-switch 有规律跳转 1.2.3.4
            sparse-switch 无规律跳转  1.20.30.80
        if 条件跳转
            if-eq 等于  if-ne 不等于
            if-lt 小于  if-le 小于等于
            if-gt 大于  if-ge 大于等于
            if-eqz 等于0 if-nez 不等于0
            if-ltz 小于0  if-lez 小于等于0
            if-gtz 大于0  if-gez 大于等于0
    (9):比较指令 用于对两个寄存器的值(浮点型或长整型)进行比较，   cmpg v1,v2,v3 比较后面两个给第一个赋值（-1，0，1）
        cmp/cmpg 大于(1)/等于(0)/小于(-1)
        mp1  大于(-1)/等于(0)/小于(1)
    (10):字段操作指令
        普通字段  iget读  iput写  例iput v0,v1   把v0的值给v1    iget v0,v1  把v1赋给v0
        静态字段  sget读  sput写
    (11):方法调用指令:
        invoke-virtual 调用实例的虚方法
        invoke-super 调用实例的父方法/基类方法
        invoke-direct 调用实例的直接方法 构造方法，静态语句块
        invoke-static 调用实例的静态方法
        invoke-interface 调用实例的接口方法
    (12):数据转换指令 将一种类型转换另一种
        opcode vA,VB  VB转换为va类型
        int-to-float v0,v1  v1（int）转为v0（float）
    (13):数据运算指令
        add/sub/mul/div/rem   /加/减/乘/除/模(取余)  例：rem-int v0,p1,p2    v0 = p1%p2
        and/or/xor 与/或/异或（相同为0，不同为1）
        shl/shr/ushr  有符号左移/有符号右移/无符号右移
8:jni静态注册
    获取java中普通字段并且返回
        //获取类                   clazz = _JNIEnv::FindClass(env, "cn/etouch/ecalendar/common/libs/DES");
        //获取字段id(string类型)      _fieldID = _JNIEnv::GetFieldID(env,jclass,"字段名",Ljava/lang/String;)
        //获取字段的值                str = GetObjectField(env, obj, _filedID)
    返回一个字符串                     v6 = _JNIEnv::NewStringUTF(env, 返回的值);
    获取java静态字段并且返回
        //获取类                   clazz = _JNIEnv::FindClass(env, "cn/etouch/ecalendar/common/libs/DES");
        //获取静态字段ID            jfildID  = StaticFieldID (*GetStaticFieldID)(JNIEnv*, clazz, "静态字段名","类型")
        //获取1静态字段值              str = GetStaticObjectField(env, jclass, jfildID);
    调用java当中的普通方法和静态方法
        //获取静态方法的id                 methodID = _JNIEnv::GetStationMethodID(env, clazz, "<init>", "(Ljava/lang/String;)V");
        //调用java中普通方法(没有返回值)   CallVoidMethod(env, obj, methodID,"()V");
        //调用静态方法                   CallStationVoidMethod(env, obj, methodID);
9:ARM汇编
    跳转指令
        B 无条件跳转
        BL 带链接的无条件跳转
        BX 带状态切换的无条件跳转
        B loc_地址
        BEQBNE
    存储器与寄存器交互数据指令  核心
        LDR 从存储器中加载数据到寄存器
            LDR     R8,[R9#4] R8为待加载数据的寄存器， 加载值为R9+0x4所指向的存储单元   即赋值给R8
        STR 将寄存器的数据存储到存储器
             STR    R3, [ucbp,#0x14]  将R3的值存储到该地址
        LDM 将存储器的数据加载到一个寄存器列表
            LDM     R0, {R1-R3} 将R0的值依次存入R1,R2,R3
        STM 将一个寄存器列表的数据存储到指定的存储器
        PUSH 将寄存器值推入堆栈
        POP 将对战值推出到寄存器
        SWP 将寄存器与存储器之间的数据进行交换
            SWP R1,R1 [R0] 将R1寄存器与R0的值互换
        堆，队列，数据结构，栈是竖的，后进先出，且只能从栈顶一次填入数据
    数据传送指令
        MOV 将立即数或寄存器的数据传送至目标寄存器
            MOV      pr_result, R6    R6赋给pr_result
    数据算数运算指令
        ADD,SUB,MUL,DIV  加减乘除 第一位是结果  第二位和三位是算术
    数据逻辑运算指令
        与 AND
        或 ORR
        异或 EOR
        移位  左移变大，右移变小 且按2的倍数进行，因为是2进制
        LSL 逻辑左移1
        LSR 逻辑右移1
            LSL RO,R1, #2    R1左移2位然后赋值给R0
            RO=R1*4       R1乘4赋值给R0
    比较指令
        CMP
            CMP R0 #0    R0和0比较
        标志位 如z位，动态调试时，寄存器窗口看到
    其他指令
        SWT 协处理器指令（切换用户模式）
        DCB 伪指令
    寄存器寻址方式
        立即寻址 MOV RO,#1234
        寄存器寻址  MOV R0,R1 R0=R1  R1赋给R0
        寄存器移位寻址 MOV RO,R1,LSL #2   将R1移位后的结果赋给R0
        寄存器间接寻址 LDR R0,[R1]  R1的值赋给R0
        寄存器间接基址偏移寻址 LDR R0,[R1,#-4]  将R1寄存器的值-0X4的值作为地址赋给R0


