

!(function get_data(){

    var window = this


    var glb;
    (glb = "undefined" == typeof window ? global : window)._$jsvmprt = function(f, e, a) {
        function b() {
            if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
            if (Reflect.construct.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Date.prototype.toString.call(Reflect.construct(Date, [], (function() {}))), !0
            } catch (f) {
                return !1
            }
        }

        function c(f, e, a) {
            return (c = b() ? Reflect.construct : function(f, e, a) {
                var b = [null];
                b.push.apply(b, e);
                var c = new(Function.bind.apply(f, b));
                return a && d(c, a.prototype),
                    c
            }).apply(null, arguments)
        }

        function d(f, e) {
            return (d = Object.setPrototypeOf || function(f, e) {
                return f.__proto__ = e,
                    f
            })(f, e)
        }

        function r(f) {
            return function(f) {
                if (Array.isArray(f)) {
                    for (var e = 0, a = new Array(f.length); e < f.length; e++)
                        a[e] = f[e];
                    return a
                }
            }(f) || function(f) {
                if (Symbol.iterator in Object(f) || "[object Arguments]" === Object.prototype.toString.call(f)) return Array.from(f)
            }(f) || function() {
                throw new TypeError("Invalid attempt to spread non-iterable instance")
            }()
        }
        for (var n = [], l = 0, i = [], t = 0, o = function(f, e) {
            var a = f[e++],
                b = f[e],
                c = parseInt("" + a + b, 16);
            if (c >> 7 == 0) return [1, c];
            if (c >> 6 == 2) {
                var d = parseInt("" + f[++e] + f[++e], 16);
                return c &= 63, [2, d = (c <<= 8) + d]
            }
            if (c >> 6 == 3) {
                var r = parseInt("" + f[++e] + f[++e], 16),
                    n = parseInt("" + f[++e] + f[++e], 16);
                return c &= 63, [3, n = (c <<= 16) + (r <<= 8) + n]
            }
        }, s = function(f, e) {
            var a = parseInt("" + f[e] + f[e + 1], 16);
            return a = a > 127 ? -256 + a : a
        }, u = function(f, e) {
            var a = parseInt("" + f[e] + f[e + 1] + f[e + 2] + f[e + 3], 16);
            return a = a > 32767 ? -65536 + a : a
        }, p = function(f, e) {
            var a = parseInt("" + f[e] + f[e + 1] + f[e + 2] + f[e + 3] + f[e + 4] + f[e + 5] + f[e + 6] + f[e + 7], 16);
            return a = a > 2147483647 ? 0 + a : a
        }, v = function(f, e) {
            return parseInt("" + f[e] + f[e + 1], 16)
        }, y = function(f, e) {
            return parseInt("" + f[e] + f[e + 1] + f[e + 2] + f[e + 3], 16)
        }, h = h || this || window, g = Object.keys || function(f) {
            var e = {}, a = 0;
            for (var b in f)
                e[a++] = b;
            return e.length = a,
                e
        }, m = (f.length,
            0), w = "", C = m; C < m + 16; C++) {
            var q = "" + f[C++] + f[C];
            q = parseInt(q, 16),
                w += String.fromCharCode(q)
        }
        if ("HNOJ@?RC" != w) throw new Error("error magic number " + w);
        m += 16;
        parseInt("" + f[m] + f[m + 1], 16);
        m += 8,
            l = 0;
        for (var I = 0; I < 4; I++) {
            var z = m + 2 * I,
                S = "" + f[z++] + f[z],
                x = parseInt(S, 16);
            l += (3 & x) << 2 * I
        }
        m += 16,
            m += 8;
        var j = parseInt("" + f[m] + f[m + 1] + f[m + 2] + f[m + 3] + f[m + 4] + f[m + 5] + f[m + 6] + f[m + 7], 16),
            $ = j,
            O = m += 8,
            R = y(f, m += j);
        R[1];
        m += 4,
            n = {
                p: [],
                q: []
            };
        for (var _ = 0; _ < R; _++) {
            for (var A = o(f, m), k = m += 2 * A[0], D = 0; D < A[1]; D++) {
                var E = "" + f[k++] + f[k++];
                E = parseInt(E, 16),
                    n.p.push(E)
            }
            n.q.push([n.p.length - A[1], n.p.length]),
                m += 2 * A[1]
        }
        var P = {
                5: 1,
                6: 1,
                70: 1,
                22: 1,
                23: 1,
                37: 1,
                73: 1
            }, F = {
                72: 1
            }, H = {
                74: 1
            }, J = {
                11: 1,
                12: 1,
                24: 1,
                26: 1,
                27: 1,
                31: 1
            }, N = {
                10: 1
            }, T = {
                2: 1,
                29: 1,
                30: 1,
                20: 1
            }, B = [],
            G = [];

        function K(f, e, a) {
            for (var b = e; b < e + a;) {
                var c = v(f, b);
                B[b] = c,
                    b += 2;
                var d = void 0;
                F[c] ? (G[b] = s(f, b),
                    b += 2) : P[c] ? (G[b] = u(f, b),
                    b += 4) : H[c] ? (G[b] = p(f, b),
                    b += 8) : J[c] ? (d = v(f, b),
                    G[b] = d,
                    b += 2) : N[c] ? (d = y(f, b),
                    G[b] = d,
                    b += 4) : T[c] && (d = y(f, b),
                    G[b] = d,
                    b += 4)
            }
        }
        return M(f, O, $ / 2, [], e, a);

        function L(f, e, a, b, d, o, m, w) {
            null == o && (o = this);
            var C, q, I, z = [],
                S = 0;
            m && (C = m);
            var x, j, $ = e,
                O = $ + 2 * a;
            if (!w) for (; $ < O;) {
                var R = parseInt("" + f[$] + f[$ + 1], 16);
                $ += 2;
                var _ = 3 & (x = 13 * R % 241);
                if (x >>= 2,
                _ > 2) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ < 1) if ((_ = x) < 2) {
                        for (j = y(f, $),
                                 _ = "",
                                 D = n.q[j][0]; D < n.q[j][1]; D++)
                            _ += String.fromCharCode(l ^ n.p[D]);
                        _ = +_,
                            $ += 4,
                            z[++S] = _
                    } else _ < 4 ? (C = z[S--],
                        z[S] = z[S] - C) : _ < 6 ? (C = z[S--],
                        z[S] = z[S] === C) : _ < 15 && (C = z[S],
                        z[S] = z[S - 1],
                        z[S - 1] = C);
                    else if (_ < 2) {
                        if ((_ = x) > 7) C = z[S--],
                            z[S] = z[S] in C;
                        else if (_ > 5) z[S] = ++z[S];
                        else if (_ > 3) j = v(f, $),
                            $ += 2,
                            C = d[j],
                            z[++S] = C;
                        else if (_ > 1) {
                            var A = 0,
                                k = z[S].length,
                                E = z[S];
                            z[++S] = function() {
                                var f = A < k;
                                if (f) {
                                    var e = E[A++];
                                    z[++S] = e
                                }
                                z[++S] = f
                            }
                        }
                    } else if (_ < 3) {
                        (_ = x) > 10 ? (j = u(f, $),
                            i[++t] = [
                                [$ + 4, j - 3], 0, 0],
                            $ += 2 * j - 2) : _ > 8 ? (C = z[S--],
                            z[S] = z[S] ^ C) : _ > 6 && (C = z[S--])
                    } else {
                        (_ = x) > 13 ? (z[++S] = p(f, $),
                            $ += 8) : _ > 11 ? (C = z[S--],
                            z[S] = z[S] >>> C) : _ > 9 ? z[++S] = !0 : _ > 7 ? (j = v(f, $),
                            $ += 2,
                            z[S] = z[S][j]) : _ > 0 && (C = z[S--],
                            z[S] = z[S] < C)
                    }
                } else if (_ > 1) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ > 2)
                        (_ = x) < 5 ? (j = u(f, $),
                            i[t][0] && !i[t][2] ? i[t][1] = [$ + 4, j - 3] : i[t++] = [0, [$ + 4, j - 3], 0],
                            $ += 2 * j - 2) : _ < 7 ? (j = v(f, $),
                            $ += 2,
                            z[++S] = d["$" + j]) : _ < 9 && (C = z[S--],
                            z[S] = z[S] | C);
                    else if (_ > 1) {
                        if ((_ = x) > 13) z[++S] = !1;
                        else if (_ > 6) C = z[S--],
                            z[S] = z[S] instanceof C;
                        else if (_ > 4) C = z[S--],
                            z[S] = z[S] % C;
                        else if (_ > 2) if (z[S--]) $ += 4;
                        else {
                            if ((j = u(f, $)) < 0) {
                                w = 1,
                                    K(f, e, 2 * a),
                                    $ += 2 * j - 2;
                                break
                            }
                            $ += 2 * j - 2
                        } else if (_ > 0) {
                            for (j = y(f, $),
                                     C = "",
                                     D = n.q[j][0]; D < n.q[j][1]; D++)
                                C += String.fromCharCode(l ^ n.p[D]);
                            z[++S] = C,
                                $ += 4
                        }
                    } else if (_ > 0) {
                        (_ = x) > 12 ? (C = z[S - 1],
                            q = z[S],
                            z[++S] = C,
                            z[++S] = q) : _ > 3 ? (C = z[S--],
                            z[S] = z[S] == C) : _ > 1 ? (C = z[S--],
                            z[S] = z[S] + C) : _ > -1 && (z[++S] = h)
                    } else {
                        (_ = x) < 2 ? (C = z[S--],
                            z[S] = z[S] > C) : _ < 9 ? (j = y(f, $),
                            $ += 4,
                            q = S + 1,
                            z[S -= j - 1] = j ? z.slice(S, q) : []) : _ < 11 ? (j = v(f, $),
                            $ += 2,
                            C = z[S--],
                            d[j] = C) : _ < 13 ? (C = z[S--],
                            z[S] = z[S] >> C) : _ < 15 && (z[++S] = u(f, $),
                            $ += 4)
                    }
                } else if (_ > 0) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ < 1) if ((_ = x) < 5) {
                        j = u(f, $);
                        try {
                            if (i[t][2] = 1,
                            1 == (C = L(f, $ + 4, j - 3, [], d, o, null, 0))[0]) return C
                        } catch (m) {
                            if (i[t] && i[t][1] && 1 == (C = L(f, i[t][1][0], i[t][1][1], [], d, o, m, 0))[0]) return C
                        } finally {
                            if (i[t] && i[t][0] && 1 == (C = L(f, i[t][0][0], i[t][0][1], [], d, o, null, 0))[0]) return C;
                            i[t] = 0,
                                t--
                        }
                        $ += 2 * j - 2
                    } else _ < 7 ? (j = v(f, $),
                        $ += 2,
                        z[S -= j] = 0 === j ? new z[S] : c(z[S], r(z.slice(S + 1, S + j + 1)))) : _ < 9 && (C = z[S--],
                        z[S] = z[S] & C);
                    else if (_ < 2) {
                        if ((_ = x) > 12) z[++S] = s(f, $),
                            $ += 2;
                        else if (_ > 10) C = z[S--],
                            z[S] = z[S] << C;
                        else if (_ > 8) {
                            for (j = y(f, $),
                                     _ = "",
                                     D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            $ += 4,
                                z[S] = z[S][_]
                        } else _ > 6 && (q = z[S--],
                            C = delete z[S--][q])
                    } else if (_ < 3) {
                        (_ = x) > 11 ? (C = z[S],
                            z[++S] = C) : _ > 9 ? (C = z[S -= 2][z[S + 1]] = z[S + 2],
                            S--) : _ > 2 ? (C = z[S--],
                            z[S] = z[S] <= C) : _ > 0 && (z[++S] = C)
                    } else {
                        if ((_ = x) > 12) z[++S] = o;
                        else if (_ > 5) C = z[S--],
                            z[S] = z[S] !== C;
                        else if (_ > 3) C = z[S--],
                            z[S] = z[S] / C;
                        else if (_ > 1) {
                            if ((j = u(f, $)) < 0) {
                                w = 1,
                                    K(f, e, 2 * a),
                                    $ += 2 * j - 2;
                                break
                            }
                            $ += 2 * j - 2
                        } else _ > -1 && (z[S] = !z[S])
                    }
                } else {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ > 2)
                        (_ = x) > 10 ? z[++S] = void 0 : _ > 1 ? (C = z[S--],
                            z[S] = z[S] >= C) : _ > -1 && (z[++S] = null);
                    else if (_ > 1) {
                        if ((_ = x) < 7) z[S] = g(z[S]);
                        else if (_ < 9) {
                            for (C = z[S--],
                                     j = y(f, $),
                                     _ = "",
                                     D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            $ += 4,
                                z[S--][_] = C
                        } else if (_ < 13) throw z[S--]
                    } else if (_ > 0) {
                        (_ = x) > 8 ? (C = z[S--],
                            z[S] = typeof C) : _ > 6 ? z[S] = --z[S] : _ > 4 ? z[S -= 1] = z[S][z[S + 1]] : _ > 2 && (q = z[S--], (_ = z[S]).x === L ? _.y >= 1 ? z[S] = M(f, _.c, _.l, [q], _.z, I, null, 1) : (z[S] = M(f, _.c, _.l, [q], _.z, I, null, 0),
                            _.y++) : z[S] = _(q))
                    } else {
                        if ((_ = x) > 14) j = u(f, $), (P = function e() {
                            var a = arguments;
                            return e.y > 0 ? M(f, e.c, e.l, a, e.z, this, null, 0) : (e.y++,
                                M(f, e.c, e.l, a, e.z, this, null, 0))
                        }).c = $ + 4,
                            P.l = j - 2,
                            P.x = L,
                            P.y = 0,
                            P.z = d,
                            z[S] = P,
                            $ += 2 * j - 2;
                        else if (_ > 12) q = z[S--],
                            I = z[S--], (_ = z[S--]).x === L ? _.y >= 1 ? z[++S] = M(f, _.c, _.l, q, _.z, I, null, 1) : (z[++S] = M(f, _.c, _.l, q, _.z, I, null, 0),
                            _.y++) : z[++S] = _.apply(I, q);
                        else if (_ > 5) C = z[S--],
                            z[S] = z[S] != C;
                        else if (_ > 3) C = z[S--],
                            z[S] = z[S] * C;
                        else if (_ > -1) return [1, z[S--]]
                    }
                }
            }
            if (w) for (; $ < O;) {
                R = B[$];
                $ += 2;
                _ = 3 & (x = 13 * R % 241);
                if (x >>= 2,
                _ < 1) {
                    var P;
                    _ = 3 & x;
                    if (x >>= 2,
                    _ < 1) {
                        if ((_ = x) > 14) j = G[$], (P = function e() {
                            var a = arguments;
                            return e.y > 0 ? M(f, e.c, e.l, a, e.z, this, null, 0) : (e.y++,
                                M(f, e.c, e.l, a, e.z, this, null, 0))
                        }).c = $ + 4,
                            P.l = j - 2,
                            P.x = L,
                            P.y = 0,
                            P.z = d,
                            z[S] = P,
                            $ += 2 * j - 2;
                        else if (_ > 12) q = z[S--],
                            I = z[S--], (_ = z[S--]).x === L ? _.y >= 1 ? z[++S] = M(f, _.c, _.l, q, _.z, I, null, 1) : (z[++S] = M(f, _.c, _.l, q, _.z, I, null, 0),
                            _.y++) : z[++S] = _.apply(I, q);
                        else if (_ > 5) C = z[S--],
                            z[S] = z[S] != C;
                        else if (_ > 3) C = z[S--],
                            z[S] = z[S] * C;
                        else if (_ > -1) return [1, z[S--]]
                    } else if (_ < 2) {
                        (_ = x) > 8 ? (C = z[S--],
                            z[S] = typeof C) : _ > 6 ? z[S] = --z[S] : _ > 4 ? z[S -= 1] = z[S][z[S + 1]] : _ > 2 && (q = z[S--], (_ = z[S]).x === L ? _.y >= 1 ? z[S] = M(f, _.c, _.l, [q], _.z, I, null, 1) : (z[S] = M(f, _.c, _.l, [q], _.z, I, null, 0),
                            _.y++) : z[S] = _(q))
                    } else if (_ < 3) {
                        if ((_ = x) > 11) throw z[S--];
                        if (_ > 7) {
                            for (C = z[S--],
                                     j = G[$],
                                     _ = "",
                                     D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            $ += 4,
                                z[S--][_] = C
                        } else _ > 5 && (z[S] = g(z[S]))
                    } else {
                        (_ = x) > 10 ? z[++S] = void 0 : _ > 1 ? (C = z[S--],
                            z[S] = z[S] >= C) : _ > -1 && (z[++S] = null)
                    }
                } else if (_ < 2) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ < 1) if ((_ = x) < 5) {
                        j = G[$];
                        try {
                            if (i[t][2] = 1,
                            1 == (C = L(f, $ + 4, j - 3, [], d, o, null, 0))[0]) return C
                        } catch (m) {
                            if (i[t] && i[t][1] && 1 == (C = L(f, i[t][1][0], i[t][1][1], [], d, o, m, 0))[0]) return C
                        } finally {
                            if (i[t] && i[t][0] && 1 == (C = L(f, i[t][0][0], i[t][0][1], [], d, o, null, 0))[0]) return C;
                            i[t] = 0,
                                t--
                        }
                        $ += 2 * j - 2
                    } else _ < 7 ? (j = G[$],
                        $ += 2,
                        z[S -= j] = 0 === j ? new z[S] : c(z[S], r(z.slice(S + 1, S + j + 1)))) : _ < 9 && (C = z[S--],
                        z[S] = z[S] & C);
                    else if (_ < 2) {
                        if ((_ = x) > 12) z[++S] = G[$],
                            $ += 2;
                        else if (_ > 10) C = z[S--],
                            z[S] = z[S] << C;
                        else if (_ > 8) {
                            for (j = G[$],
                                     _ = "",
                                     D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            $ += 4,
                                z[S] = z[S][_]
                        } else _ > 6 && (q = z[S--],
                            C = delete z[S--][q])
                    } else if (_ < 3) {
                        (_ = x) > 11 ? (C = z[S],
                            z[++S] = C) : _ > 9 ? (C = z[S -= 2][z[S + 1]] = z[S + 2],
                            S--) : _ > 2 ? (C = z[S--],
                            z[S] = z[S] <= C) : _ > 0 && (z[++S] = C)
                    } else {
                        (_ = x) < 1 ? z[S] = !z[S] : _ < 3 ? $ += 2 * (j = G[$]) - 2 : _ < 5 ? (C = z[S--],
                            z[S] = z[S] / C) : _ < 7 ? (C = z[S--],
                            z[S] = z[S] !== C) : _ < 14 && (z[++S] = o)
                    }
                } else if (_ < 3) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ > 2)
                        (_ = x) < 5 ? (j = G[$],
                            i[t][0] && !i[t][2] ? i[t][1] = [$ + 4, j - 3] : i[t++] = [0, [$ + 4, j - 3], 0],
                            $ += 2 * j - 2) : _ < 7 ? (j = G[$],
                            $ += 2,
                            z[++S] = d["$" + j]) : _ < 9 && (C = z[S--],
                            z[S] = z[S] | C);
                    else if (_ > 1) {
                        if ((_ = x) < 2) {
                            for (j = G[$],
                                     C = "",
                                     D = n.q[j][0]; D < n.q[j][1]; D++)
                                C += String.fromCharCode(l ^ n.p[D]);
                            z[++S] = C,
                                $ += 4
                        } else _ < 4 ? z[S--] ? $ += 4 : $ += 2 * (j = G[$]) - 2 : _ < 6 ? (C = z[S--],
                            z[S] = z[S] % C) : _ < 8 ? (C = z[S--],
                            z[S] = z[S] instanceof C) : _ < 15 && (z[++S] = !1)
                    } else if (_ > 0) {
                        (_ = x) > 12 ? (C = z[S - 1],
                            q = z[S],
                            z[++S] = C,
                            z[++S] = q) : _ > 3 ? (C = z[S--],
                            z[S] = z[S] == C) : _ > 1 ? (C = z[S--],
                            z[S] = z[S] + C) : _ > -1 && (z[++S] = h)
                    } else {
                        (_ = x) < 2 ? (C = z[S--],
                            z[S] = z[S] > C) : _ < 9 ? (j = G[$],
                            $ += 4,
                            q = S + 1,
                            z[S -= j - 1] = j ? z.slice(S, q) : []) : _ < 11 ? (j = G[$],
                            $ += 2,
                            C = z[S--],
                            d[j] = C) : _ < 13 ? (C = z[S--],
                            z[S] = z[S] >> C) : _ < 15 && (z[++S] = G[$],
                            $ += 4)
                    }
                } else {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ > 2)
                        (_ = x) > 13 ? (z[++S] = G[$],
                            $ += 8) : _ > 11 ? (C = z[S--],
                            z[S] = z[S] >>> C) : _ > 9 ? z[++S] = !0 : _ > 7 ? (j = G[$],
                            $ += 2,
                            z[S] = z[S][j]) : _ > 0 && (C = z[S--],
                            z[S] = z[S] < C);
                    else if (_ > 1) {
                        (_ = x) < 6 || (_ < 8 ? C = z[S--] : _ < 10 ? (C = z[S--],
                            z[S] = z[S] ^ C) : _ < 12 && (j = G[$],
                            i[++t] = [
                                [$ + 4, j - 3], 0, 0],
                            $ += 2 * j - 2))
                    } else if (_ > 0) {
                        if ((_ = x) < 3) {
                            A = 0,
                                k = z[S].length,
                                E = z[S];
                            z[++S] = function() {
                                var f = A < k;
                                if (f) {
                                    var e = E[A++];
                                    z[++S] = e
                                }
                                z[++S] = f
                            }
                        } else _ < 5 ? (j = G[$],
                            $ += 2,
                            C = d[j],
                            z[++S] = C) : _ < 7 ? z[S] = ++z[S] : _ < 9 && (C = z[S--],
                            z[S] = z[S] in C)
                    } else {
                        if ((_ = x) > 13) C = z[S],
                            z[S] = z[S - 1],
                            z[S - 1] = C;
                        else if (_ > 4) C = z[S--],
                            z[S] = z[S] === C;
                        else if (_ > 2) C = z[S--],
                            z[S] = z[S] - C;
                        else if (_ > 0) {
                            for (j = G[$],
                                     _ = "",
                                     D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            _ = +_,
                                $ += 4,
                                z[++S] = _
                        }
                    }
                }
            }
            return [0, null]
        }

        function M(f, e, a, b, c, d, r, n) {
            var l, i;
            null == d && (d = this),
            c && !c.d && (c.d = 0,
                c.$0 = c,
                c[1] = {});
            var t = {}, o = t.d = c ? c.d + 1 : 0;
            for (t["$" + o] = t,
                     i = 0; i < o; i++)
                t[l = "$" + i] = c[l];
            for (i = 0,
                     o = t.length = b.length; i < o; i++)
                t[i] = b[i];
            return n && !B[e] && K(f, e, 2 * a),
                B[e] ? L(f, e, a, 0, t, d, null, 1)[1] : L(f, e, a, 0, t, d, null, 0)[1]
        }
    }, (glb = "undefined" == typeof window ? global : window)._$jsvmprt("", [, , "undefined" != typeof exports ? exports : void 0, "undefined" != typeof module ? module : void 0]);



    function s(t, e) {
        var i = (65535 & t) + (65535 & e),
            n = (t >> 16) + (e >> 16) + (i >> 16);
        return n << 16 | 65535 & i
    }

    function o(t, e) {
        return t << e | t >>> 32 - e
    }

    function r(t, e, i, n, a, r) {
        return s(o(s(s(e, t), s(n, r)), a), i)
    }

    function l(t, e, i, n, a, s, o) {
        return r(e & i | ~e & n, t, e, a, s, o)
    }

    function u(t, e, i, n, a, s, o) {
        return r(e & n | i & ~n, t, e, a, s, o)
    }

    function c(t, e, i, n, a, s, o) {
        return r(e ^ i ^ n, t, e, a, s, o)
    }

    function d(t, e, i, n, a, s, o) {
        return r(i ^ (e | ~n), t, e, a, s, o)
    }

    function h(t, e) {
        t[e >> 5] |= 128 << e % 32,
            t[(e + 64 >>> 9 << 4) + 14] = e;
        var i, n, a, o, r, h = 1732584193,
            m = -271733879,
            _ = -1732584194,
            p = 271733878;
        for (i = 0; i < t.length; i += 16)
            n = h,
                a = m,
                o = _,
                r = p,
                h = l(h, m, _, p, t[i], 7, -680876936),
                p = l(p, h, m, _, t[i + 1], 12, -389564586),
                _ = l(_, p, h, m, t[i + 2], 17, 606105819),
                m = l(m, _, p, h, t[i + 3], 22, -1044525330),
                h = l(h, m, _, p, t[i + 4], 7, -176418897),
                p = l(p, h, m, _, t[i + 5], 12, 1200080426),
                _ = l(_, p, h, m, t[i + 6], 17, -1473231341),
                m = l(m, _, p, h, t[i + 7], 22, -45705983),
                h = l(h, m, _, p, t[i + 8], 7, 1770035416),
                p = l(p, h, m, _, t[i + 9], 12, -1958414417),
                _ = l(_, p, h, m, t[i + 10], 17, -42063),
                m = l(m, _, p, h, t[i + 11], 22, -1990404162),
                h = l(h, m, _, p, t[i + 12], 7, 1804603682),
                p = l(p, h, m, _, t[i + 13], 12, -40341101),
                _ = l(_, p, h, m, t[i + 14], 17, -1502002290),
                m = l(m, _, p, h, t[i + 15], 22, 1236535329),
                h = u(h, m, _, p, t[i + 1], 5, -165796510),
                p = u(p, h, m, _, t[i + 6], 9, -1069501632),
                _ = u(_, p, h, m, t[i + 11], 14, 643717713),
                m = u(m, _, p, h, t[i], 20, -373897302),
                h = u(h, m, _, p, t[i + 5], 5, -701558691),
                p = u(p, h, m, _, t[i + 10], 9, 38016083),
                _ = u(_, p, h, m, t[i + 15], 14, -660478335),
                m = u(m, _, p, h, t[i + 4], 20, -405537848),
                h = u(h, m, _, p, t[i + 9], 5, 568446438),
                p = u(p, h, m, _, t[i + 14], 9, -1019803690),
                _ = u(_, p, h, m, t[i + 3], 14, -187363961),
                m = u(m, _, p, h, t[i + 8], 20, 1163531501),
                h = u(h, m, _, p, t[i + 13], 5, -1444681467),
                p = u(p, h, m, _, t[i + 2], 9, -51403784),
                _ = u(_, p, h, m, t[i + 7], 14, 1735328473),
                m = u(m, _, p, h, t[i + 12], 20, -1926607734),
                h = c(h, m, _, p, t[i + 5], 4, -378558),
                p = c(p, h, m, _, t[i + 8], 11, -2022574463),
                _ = c(_, p, h, m, t[i + 11], 16, 1839030562),
                m = c(m, _, p, h, t[i + 14], 23, -35309556),
                h = c(h, m, _, p, t[i + 1], 4, -1530992060),
                p = c(p, h, m, _, t[i + 4], 11, 1272893353),
                _ = c(_, p, h, m, t[i + 7], 16, -155497632),
                m = c(m, _, p, h, t[i + 10], 23, -1094730640),
                h = c(h, m, _, p, t[i + 13], 4, 681279174),
                p = c(p, h, m, _, t[i], 11, -358537222),
                _ = c(_, p, h, m, t[i + 3], 16, -722521979),
                m = c(m, _, p, h, t[i + 6], 23, 76029189),
                h = c(h, m, _, p, t[i + 9], 4, -640364487),
                p = c(p, h, m, _, t[i + 12], 11, -421815835),
                _ = c(_, p, h, m, t[i + 15], 16, 530742520),
                m = c(m, _, p, h, t[i + 2], 23, -995338651),
                h = d(h, m, _, p, t[i], 6, -198630844),
                p = d(p, h, m, _, t[i + 7], 10, 1126891415),
                _ = d(_, p, h, m, t[i + 14], 15, -1416354905),
                m = d(m, _, p, h, t[i + 5], 21, -57434055),
                h = d(h, m, _, p, t[i + 12], 6, 1700485571),
                p = d(p, h, m, _, t[i + 3], 10, -1894986606),
                _ = d(_, p, h, m, t[i + 10], 15, -1051523),
                m = d(m, _, p, h, t[i + 1], 21, -2054922799),
                h = d(h, m, _, p, t[i + 8], 6, 1873313359),
                p = d(p, h, m, _, t[i + 15], 10, -30611744),
                _ = d(_, p, h, m, t[i + 6], 15, -1560198380),
                m = d(m, _, p, h, t[i + 13], 21, 1309151649),
                h = d(h, m, _, p, t[i + 4], 6, -145523070),
                p = d(p, h, m, _, t[i + 11], 10, -1120210379),
                _ = d(_, p, h, m, t[i + 2], 15, 718787259),
                m = d(m, _, p, h, t[i + 9], 21, -343485551),
                h = s(h, n),
                m = s(m, a),
                _ = s(_, o),
                p = s(p, r);
        return [h, m, _, p]
    }

    function m(t) {
        var e, i = "";
        for (e = 0; e < 32 * t.length; e += 8)
            i += String.fromCharCode(t[e >> 5] >>> e % 32 & 255);
        return i
    }

    function _(t) {
        var e, i = [];
        for (i[(t.length >> 2) - 1] = void 0,
                 e = 0; e < i.length; e += 1)
            i[e] = 0;
        for (e = 0; e < 8 * t.length; e += 8)
            i[e >> 5] |= (255 & t.charCodeAt(e / 8)) << e % 32;
        return i
    }

    function p(t) {
        return m(h(_(t), 8 * t.length))
    }

    function f(t, e) {
        var i, n, a = _(t),
            s = [],
            o = [];
        for (s[15] = o[15] = void 0,
             a.length > 16 && (a = h(a, 8 * t.length)),
                 i = 0; i < 16; i += 1)
            s[i] = 909522486 ^ a[i],
                o[i] = 1549556828 ^ a[i];
        return n = h(s.concat(_(e)), 512 + 8 * e.length),
            m(h(o.concat(n), 640))
    }

    function g(t) {
        var e, i, n = "0123456789abcdef",
            a = "";
        for (i = 0; i < t.length; i += 1)
            e = t.charCodeAt(i),
                a += n.charAt(e >>> 4 & 15) + n.charAt(15 & e);
        return a
    }

    function v(t) {
        return unescape(encodeURIComponent(t))
    }

    function w(t) {
        return p(v(t))
    }

    function y(t) {
        return g(w(t))
    }

    function b(t, e) {
        return f(v(t), v(e))
    }

    function x(t, e) {
        return g(b(t, e))
    }

    function C(t, e, i) {
        return e ? i ? b(e, t) : x(e, t) : i ? w(t) : y(t)
    }

    function get_info() {
        var t = Math.floor((new Date).getTime() / 1e3),
            e = t.toString(16).toUpperCase(),
            i = (0, C)(t).toString().toUpperCase();
        if (8 != e.length) return {
            as: "479BB4B7254C150",
            cp: "7E0AC8874BB0985"
        };
        for (var n = i.slice(0, 5), a = i.slice(-5), s = "", r = 0; r < 5; r++)
            s += n[r] + e[r];
        for (var l = "", u = 0; u < 5; u++)
            l += e[u + 3] + a[u];
        info = {
            as: "A1" + s + e.slice(-3),
            cp: e.slice(0, 3) + l + "E1"
        }
        return info;
    }

    window.byted_acrawler.init({
        aid: 24,
        dfp: true,
        intercept: true,
        // 开启拦截器后，所有符合下面列表条件的 url 都会自动加上 _signature 参数
        // SDK 会拦截所有使用 XMLHTTPRequest 发送的请求，包括第三方库发出的，所以请严格设置 enablePathList
        enablePathList: ['/c/ugc/video/publish/'],
        urlRewriteRules: [
            ['/c/ugc/video/publish/', '/toutiao/c/ugc/video/publish/']
        ]
    })

    function getpwd() {
        var info = get_info();
        var time = parseInt((new Date).getTime() / 1000)
        var t = "/toutiao/api/pc/feed/?max_behot_time=" + time;
        var e = {
            "category": "__all__",
            "utm_source": "toutiao",
            "widen": 1,
            "tadrequire": true,
            "as": info.as,
            "cp": info.cp
        }
        var i = "";
        /^http/.test(t) || (t = "https:" + "//" + "www.toutiao.com" + t);
        for (var n in e)
            i += "&" + n + "=" + encodeURIComponent(e[n]);
        t += t.indexOf("?") > -1 ? t.split("?")[1] ? i : i.slice(1) : "?" + i.slice(1);
        var a = {
            url: t
        };
//     return a.url;
        return window.byted_acrawler.sign(a);
    }
    data = getpwd()
    console.log(data)
    return data
}())